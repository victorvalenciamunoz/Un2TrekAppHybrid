@page "/maps/{activity}"

@using Blazicons
@using Blazorise.LottieAnimation
@using System.Text.Json
@using Un2TrekApp.Activities
@using Un2TrekApp.Domain
@using Un2TrekApp.Storage
@using Un2TrekApp.Trekis

@inject IJSRuntime JsRuntime
@inject IDialogService dialogService

<div class="d-flex flex-column" style="height:100%">
    <div id="map" class="flex-fill" style="color:black; height:100%">
        @if (_isBusy)
        {
            <LottieAnimation Path="/animations/trekking.json" Style="height: 250px;" Loop="true" />
        }
    </div>
    <div class="col-12 d-flex flex-row" style="height:80px; ">
        <div class="footer-menu-item flex-grow-1 d-flex flex-column justify-content-center align-items-center" @onclick="CenterUserPositionAsync">
            Mi posición
            <div style="font-size: 200%;">
                <Blazicon Svg="FluentUiIcon.Location"></Blazicon>
            </div>
        </div>
        <div class="footer-menu-item flex-grow-1 d-flex flex-column justify-content-center align-items-center"
             disabled="@(_selectedTreki is not null)" @onclick="OpenTrekiInfoDialog">
            Info
            <div style="font-size: 200%;">
                <Blazicon Svg="FluentUiIcon.GlobeSearch"></Blazicon>
            </div>
        </div>
        <div class="footer-menu-item flex-grow-1 d-flex flex-column justify-content-center align-items-center"
             disabled="@(_selectedTreki is not null)" @onclick="CaptureTreki">
            ¡Lo tengo!
            <div style="font-size: 200%;">
                <Blazicon Svg="FluentUiIcon.PeopleTeam"></Blazicon>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public string Activity { get; set; }

    [Inject]
    ITrekisService TrekisService { get; set; }

    [Inject]
    IActivitiesService ActivitiesService { get; set; }

    [Inject]
    ILocalStorage localStorage { get; set; }

    [Inject]
    NotificationService NotificationService { get; set; }

    private IJSObjectReference _jsModule;

    private bool _isBusy = true;
    private Treki? _selectedTreki = null;
    private List<Treki> _trekis = new List<Treki>();
    (double Latitude, double Longitude)? currentLocation;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Maps/MapsComponent.razor.js");
            await _jsModule.InvokeVoidAsync("initializeMap", DotNetObjectReference.Create(this));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _selectedTreki = null;
        await SetMapUserLocation();
    }

    private async Task<IEnumerable<Treki>> GetTrekisAsync()
    {
        return await ActivitiesService.GetTrekiListByActivityAsync(Activity);
    }

    private async Task SetMapUserLocation()
    {
        currentLocation = await GetLocationAsync();
        await InitMap();
    }

    private async Task InitMap()
    {
        await CenterUserPositionAsync();
        if (currentLocation is not null)
        {
            _trekis = (await GetTrekisAsync()).ToList();
            await AddMarkersToMapAsync(_trekis.ToList(), (currentLocation.Value.Latitude, currentLocation.Value.Longitude));
        }
    
    }

    private async Task AddMarkersToMapAsync(List<Treki> trekis, (double latitud, double longitud) refPosition)
    {
        var positions = trekis.Select(treki => new { lat = treki.Latitude, lon = treki.Longitude }).ToList();

        await _jsModule.InvokeVoidAsync("ClearMarkers");
        await _jsModule.InvokeVoidAsync("AddCurrentUserLocationMarker", refPosition.latitud, refPosition.longitud);
        await _jsModule.InvokeVoidAsync("AddMarkers", positions);
    }

    private async Task CenterUserPositionAsync()
    {
        _isBusy = true;

        if (currentLocation.HasValue)
        {
            await _jsModule.InvokeVoidAsync("AddCurrentUserLocationMarker", currentLocation.Value.Latitude, currentLocation.Value.Longitude);
        }
        _isBusy = false;
    }

    private async Task<(double Latitude, double Longitude)?> GetLocationAsync()
    {
        try
        {
            var request = new GeolocationRequest(GeolocationAccuracy.Medium);
            var location = await Geolocation.GetLocationAsync(request);
            if (location != null)
            {
                Console.WriteLine($"Latitude: {location.Latitude}, Longitude: {location.Longitude}");
                return (location.Latitude, location.Longitude);
            }
        }
        catch (Exception ex)
        {
            // Manejar errores aquí
            Console.WriteLine($"Error: {ex.Message}");
        }

        return null;
    }

    [JSInvokable]
    public async Task MarkerClicked(double latitude, double longitude)
    {
        if (_trekis.Any())
        {
            var treki = _trekis.FirstOrDefault(p => p.Latitude == latitude && p.Longitude == longitude);
            _selectedTreki = new Treki
                {
                    Description = treki.Description,
                    Id = treki.Id,
                    Latitude = treki.Latitude,
                    Longitude = treki.Longitude,
                    Title = treki.Title
                };
        }
    }

    private async Task OpenTrekiInfoDialog(MouseEventArgs e)
    {
        if (_selectedTreki is null)
        {
            //TODO: Mostrar mensaje de error
            return;
        }
        var dialog = await dialogService.ShowDialogAsync<TrekiInfoDialog>(_selectedTreki, new DialogParameters()
            {
                Title = $"Información",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });
    }

    private async Task CaptureTreki()
    {
        if (_selectedTreki is null)
        {
            ShowWarningNotification("Selecciona un Treki para capturarlo");
            return;
        }
        if (currentLocation is null)
        {
            ShowWarningNotification("No se ha podido obtener tu ubicación actual");
            return;
        }

        string serializedUserInfo = await localStorage.GetAsync(App.StorageUserInfoKey);
        var userInfo = JsonSerializer.Deserialize<User>(serializedUserInfo);
        var result = await TrekisService.CaptureTreki(Activity, _selectedTreki, currentLocation.Value, userInfo.UserId);

        if (result.IsError)
        {
            ShowErrorNotification(result.FirstError.Description);
            return;
        }

        await dialogService.ShowDialogAsync<TrekiCaptured>(_selectedTreki, new DialogParameters()
            {
                Title = $"Información",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });
    }

    private void ShowErrorNotification(string message)
    {
        NotificationService.Notify(
             new NotificationMessage
                 {
                     Severity = NotificationSeverity.Error,
                     Summary = "Un2Trek",
                     Detail = message,
                     Duration = 4000
                 });
    }

    private void ShowWarningNotification(string message)
    {
        NotificationService.Notify(
             new NotificationMessage
                 {
                     Severity = NotificationSeverity.Warning,
                     Summary = "Un2Trek",
                     Detail = message,
                     Duration = 4000
                 });
    }
}