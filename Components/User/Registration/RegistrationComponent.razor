@page "/registration"

@using System.Text.RegularExpressions
@using System.Text.Json
@using Blazorise.LottieAnimation
@using Un2TrekApp.Authentication
@using Un2TrekApp.Storage

<div class="d-flex flex-column justify-content-center align-items-center"
     style="background-image:url('/images/main_back.webp'); background-repeat:no-repeat;background-size: cover; min-height:100vh;">
    <div style="display:@(_isBusy?"block":"none"); height:100%">
        <LottieAnimation Path="/animations/trekking.json" Style="height: 250px;" Loop="true" />
    </div>
    <div class="header col-lg-4 col-md-5" style="display:@(_isBusy?"none":"block")">
        <div class="container" style="text-align:center">
            <div class="pb-5" style="height:90%">
                <div class="pt-3">
                    <img src="/images/logo_blanco_un2trek_verde.png" />
                </div>
                <div class="col-12 text-center secondary-title">
                    
                    <span style="font-size:18px">Introduce tus datos de usuario</span>
                    <div class="col-12 mt-5 ps-5 pe-5" style="height:20px">
                        <InputText type="text" class="default-textbox col-12 p-xxl-3 p-xl-2 p-1" @bind-Value=_request.Name placeholder="Nombre"></InputText>
                    </div>
                    <div class="col-12 mt-5 ps-5 pe-5" style="height:20px">
                        <InputText type="text" class="default-textbox col-12 p-xxl-3 p-xl-2 p-1" @bind-Value=_request.LastName placeholder="Primer apellido"></InputText>
                    </div>

                    <div class="col-12 mt-5 ps-5 pe-5" style="height:20px">
                        <InputText type="email" class="default-textbox col-12 p-xxl-3 p-xl-2 p-1" @bind-Value=_request.Email placeholder="Correo"></InputText>
                    </div>
                    <div class="col-12 mt-5 ps-5 pe-5" style="height:20px">
                        <InputText type="password" class="default-textbox col-12 p-xxl-3 p-xl-2 p-1" @bind-Value=_request.Password placeholder="Contraseña"></InputText>
                    </div>
                    <div class="col-12 mt-5 ps-5 pe-5" style="height:20px">
                        <InputText type="password" class="default-textbox col-12 p-xxl-3 p-xl-2 p-1" @bind-Value=_confirmPassword placeholder="Confirma contraseña"></InputText>
                    </div>                   
                    <div class="col-12 mt-5 ps-5 pe-5" style="height:20px">
                        <InputCheckbox class="me-2" @bind-Value=_acceptPrivacyPolicy />
                        <label for="privacyPolicy" style="font-size:12px">Acepto la <a href="https://www.un2trek.com/privacidad" target="_blank" style="font-size:12px">política de privacidad</a></label>
                    </div>
                    <div class="col-12 mt-5 ps-5 pe-5" style="height:35px;font-size:12px">
                        <button class="col-12 default-filled-button" @onclick="DoRegistration">Registrarme</button>
                    </div>
                    <div class="col-12 mt-3 ps-5 pe-5 d-flex justify-content-end" style="height:25px; font-size:12px">
                        <a href="/" class="default-link">Volver al inicio</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    [Inject]
    NotificationService NotificationService { get; set; }

    [Inject]
    IAuthService authService { get; set; }

    [Inject]
    ILocalStorage localStorage { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    private RegistrationRequest _request = new();
    private string _confirmPassword;
    private bool _acceptPrivacyPolicy = false;
    private bool _isBusy = false;

    protected override void OnInitialized()
    {        
        _request = new();


        base.OnInitialized();
    }
    
    private async Task DoRegistration()
    {
        _isBusy = true;
        if (!IsValidEmailAddress())
        {
            _isBusy = false;
            ShowErrorMessage("El email no es válido");
            return;
        }

        if (string.IsNullOrEmpty(_request.Password))
        {
            _isBusy = false;
            ShowErrorMessage("La contraseña no es válida");
            return;
        };

         if (_request.Password != _confirmPassword)
        {
            _isBusy = false;
            ShowErrorMessage("Las contraseñas no coinciden");
            return;
        }
        
        if (!_acceptPrivacyPolicy)
        {
            _isBusy = false;
            ShowErrorMessage("Debes aceptar la política de privacidad");
            return;
        }

        var registerResult = await authService.RegisterAsync(_request);
        if (registerResult.IsError)
        {
            _isBusy = false;
            ShowErrorMessage(registerResult.FirstError.Description);
            return;
        }

        ShowInformationMessage("Se ha enviado un correo de verificación a la dirección de email proporcionada. Por favor, sigue las instrucciones para completar el registro.");

         _request = new();
        _confirmPassword = string.Empty;
        _acceptPrivacyPolicy = false;

        _isBusy = false;
    }

    private bool IsValidEmailAddress()
    {
        var regex = new Regex(@"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$", RegexOptions.Compiled);
        return regex.IsMatch(_request.Email);
    }

    private void ShowErrorMessage(string message)
    {
        NotificationService.Notify(
             new NotificationMessage
                 {
                     Severity = NotificationSeverity.Error,
                     Summary = "Un2Trek",
                     Detail = message,
                     Duration = 4000
                 });
    }

    private void ShowInformationMessage(string message)
    {
        NotificationService.Notify(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Un2Trek",
                    Detail = message,
                    Duration = 4000
                });
    }
}